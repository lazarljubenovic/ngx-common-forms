import { ContentChildren, Directive, ElementRef, Optional, Renderer2, Self } from '@angular/core';
import { SinDirective } from './sin.directive';
import { ControlContainer, FormControlName } from '@angular/forms';
import * as rx from 'rxjs';
import * as rxop from 'rxjs/operators';
export function findAdded([olders, newers]) {
    return newers.filter(newer => olders.indexOf(newer) == -1);
}
export function findRemoved([olders, newers]) {
    return findAdded([newers, olders]);
}
export class FormWithSinsDirective {
    constructor(controlContainer, renderer, elementRef) {
        this.controlContainer = controlContainer;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.destroy$ = new rx.Subject();
        this.classNameForInvalidControl = 'ngx-sin-invalid';
    }
    markValidityFor(control, addClass) {
        const index = this.formControlNames.toArray()
            .findIndex(formControlName => {
            return control == formControlName.control;
        });
        let elRef;
        if (index == -1) {
            const formGroup = this.controlContainer.control;
            if (formGroup == control) {
                elRef = this.elementRef;
            }
            else {
                // Could not find the FormControl in the view, do nothing
                return;
            }
        }
        else {
            elRef = this.formControlElRefs.toArray()[index];
        }
        if (addClass) {
            this.renderer.addClass(elRef.nativeElement, this.classNameForInvalidControl);
        }
        else {
            this.renderer.removeClass(elRef.nativeElement, this.classNameForInvalidControl);
        }
    }
    markValidityForAll(controls, addClass) {
        controls.forEach(control => this.markValidityFor(control, addClass));
    }
    markAllAsValid() {
        this.formControlElRefs.forEach(elRef => {
            this.renderer.removeClass(elRef.nativeElement, this.classNameForInvalidControl);
        });
    }
    ngAfterContentInit() {
        if (this.sinDirectives == null) {
            // This form does not have any sins
            return;
        }
        this.formControls = rx.zip(this.formControlNames.changes.pipe(rxop.startWith(this.formControlNames)), this.formControlElRefs.changes.pipe(rxop.startWith(this.formControlElRefs))).pipe(rxop.map(([name, elRef]) => ({ name, elRef })));
        const visibleSins$ = this.sinDirectives.changes.pipe(rxop.startWith(this.sinDirectives), rxop.map((list) => list.toArray()), rxop.switchMap((sins) => rx.combineLatest(sins.map(sin => sin.visible$))), rxop.map((controls) => controls.filter(control => control != null)));
        this.formControls.pipe(rxop.withLatestFrom(this.sinDirectives.changes.pipe(rxop.startWith(this.sinDirectives)), (fc, s) => s), rxop.map((list) => list.toArray().map(sin => sin.visible$.getValue())), rxop.map((controls) => controls.filter(control => control != null)), rxop.withLatestFrom(visibleSins$, (_, sins) => sins))
            .subscribe((controls) => {
            // When form controls on the page change, we grab the last info about
            // visible sins and use that. We have to be destructive here
            this.markAllAsValid();
            this.markValidityForAll(controls, true);
        });
        visibleSins$.pipe(rxop.pairwise())
            .subscribe(([oldControls, newControls]) => {
            // We can calculate diff instead of removing and setting everything.
            const added = findAdded([oldControls, newControls]);
            const removed = findRemoved([oldControls, newControls]);
            this.markValidityForAll(added, true);
            this.markValidityForAll(removed, false);
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
FormWithSinsDirective.decorators = [
    { type: Directive, args: [{ selector: 'form' },] }
];
FormWithSinsDirective.ctorParameters = () => [
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Self }] },
    { type: Renderer2 },
    { type: ElementRef }
];
FormWithSinsDirective.propDecorators = {
    sinDirectives: [{ type: ContentChildren, args: [SinDirective, { descendants: true },] }],
    formControlNames: [{ type: ContentChildren, args: [FormControlName, { descendants: true },] }],
    formControlElRefs: [{ type: ContentChildren, args: [FormControlName, { descendants: true, read: ElementRef },] }]
};
//# sourceMappingURL=data:application/json;base64,