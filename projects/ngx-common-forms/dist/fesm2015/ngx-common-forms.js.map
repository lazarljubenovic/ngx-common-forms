{"version":3,"file":"ngx-common-forms.js","sources":["../../src/lib/config.ts","../../src/lib/common-form-control.directive.ts","../../src/lib/common-form.directive.ts","../../src/lib/common-forms.module.ts","../../src/lib/sins.directive.ts","../../src/lib/sin.directive.ts","../../src/lib/form-with-sins.directive.ts","../../src/lib/sin.module.ts","../../src/ngx-common-forms.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core'\nimport {CommonFormConfig, SinModuleConfig} from './interfaces'\n\nexport const COMMON_FORM_CONFIG =\n  new InjectionToken<Partial<CommonFormConfig>>('COMMON_FORM_CONFIG')\n\nexport const COMMON_FORM_FULL_CONFIG =\n  new InjectionToken<CommonFormConfig>('COMMON_FORM_FULL_CONFIG')\n\nexport const COMMON_FORM_CONTROL =\n  new InjectionToken<any>('COMMON_FORM_CONTROL')\n\nexport const SIN_CONFIG =\n  new InjectionToken<Partial<SinModuleConfig>>('SIN_CONFIG')\n\nexport const SIN_FULL_CONFIG\n  = new InjectionToken<SinModuleConfig>('SIN_FULL_CONFIG')\n","import {COMMON_FORM_CONTROL} from './config'\nimport {Directive, ElementRef, forwardRef, Inject, Input, OnInit, Optional, Renderer2, Self} from '@angular/core'\nimport {CommonFormControl} from './interfaces'\nimport {NgControl} from '@angular/forms'\n\nfunction isEmpty (x: string): boolean {\n  return x == null || x == ''\n}\n\nexport function providerFactory (klass: any) {\n  return {\n    provide: COMMON_FORM_CONTROL,\n    useExisting: forwardRef(() => klass),\n  }\n}\n\n@Directive({\n  selector: 'input:not([notCommonControl]),select:not([notCommonControl]),textarea:not([notCommonControl])',\n  providers: [providerFactory(DefaultCommonFormControlDirective)],\n})\nexport class DefaultCommonFormControlDirective implements CommonFormControl {\n\n  private _name: string\n\n  @Input()\n  public set name (name: string) {\n    this.setName(name)\n  }\n\n  constructor (private renderer: Renderer2, private elRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) {\n  }\n\n  public setName (name: string): void {\n    this._name = name\n    this.renderer.setAttribute(this.elRef.nativeElement, 'name', name)\n  }\n\n  public getName (): string {\n    return this._name\n  }\n\n  public focus (): void {\n    this.elRef.nativeElement.focus()\n  }\n\n}\n\nlet uniqueId = 0\n\n@Directive({\n  selector: '[formControlName]:not([notCommonControl]),[formControl]:not([notCommonControl])',\n})\nexport class CommonFormControlDirective implements OnInit {\n\n  constructor (@Self() public ngControl: NgControl,\n               @Self() @Optional() @Inject(COMMON_FORM_CONTROL) public commonFormControl: CommonFormControl) {\n  }\n\n  public ngOnInit (): void {\n    if (!this.commonFormControl) {\n      console.warn(\n        `A control inside a Common Form does not provide COMMON_FORM_CONTROL token. ` +\n        `It will be ignored. If you do not wish Common Form to be aware of this control, add ` +\n        `[notCommonControl] selector. Path to control: \"${this.ngControl.path.join('.')}\".`,\n      )\n      return\n    }\n\n    if (isEmpty(this.commonFormControl.getName())) {\n      const newName = this.ngControl.name.toString() || `common-form-control-name-${++uniqueId}`\n      this.commonFormControl.setName(newName)\n    }\n  }\n\n}\n","import {AbstractControl, FormGroup, FormGroupDirective} from '@angular/forms'\nimport {ContentChildren, Directive, EventEmitter, Inject, Input, OnInit, Output, QueryList, Self} from '@angular/core'\nimport * as rx from 'rxjs'\nimport * as rxop from 'rxjs/operators'\nimport {\n  CommonFormConfig,\n  CommonFormIsValidationError,\n  CommonFormRequest,\n  CommonFormTransform,\n  CommonFormTransformError,\n  FlatServerErrors,\n} from './interfaces'\nimport {COMMON_FORM_FULL_CONFIG} from './config'\nimport {CommonFormControlDirective} from './common-form-control.directive'\nimport {HttpErrorResponse} from '@angular/common/http'\n\nfunction markControlsAsDirtyAndTouched (controls: AbstractControl[]) {\n  controls.forEach(control => {\n    control.markAsDirty()\n    control.markAsTouched()\n  })\n}\n\nexport function markControlsAsDirtyAndTouchedByPath (form: FormGroup, controlNames: string[]) {\n  controlNames.forEach(controlName => {\n    const control = form.get(controlName)\n    if (control != null) {\n      control.markAsTouched()\n      control.markAsDirty()\n    } else {\n      console.error(\n        `Attempted to set control with name ${controlName} as dirty and touched, ` +\n        `but it was not found.`,\n      )\n    }\n  })\n}\n\n@Directive({\n  selector: '[commonForm]',\n})\nexport class CommonFormDirective implements OnInit, CommonFormConfig {\n\n  private submit$ = new rx.Subject<any>()\n\n  @Output() public isLoading = new EventEmitter<boolean>()\n\n  public get isLoading$ (): rx.Observable<boolean> {\n    return this.isLoading.asObservable()\n  }\n\n  @Output() public commonFormSubmit = new EventEmitter<rx.Observable<any>>()\n\n  /**\n   * Set to true if you want to propagate errors to the consumer component.\n   */\n  @Input() public propagateErrors: boolean\n\n  /**\n   * Right after the form's submit event and before ngx-common-forms does anything,\n   * this function will be run if given.\n   */\n  @Input() public preSubmit?: () => void\n\n  /**\n   * Set this input to override the provided transform function.\n   */\n  @Input() public transform: CommonFormTransform\n\n  /**\n   * A predicate to determine if the error is supposed to be treated as a validation\n   * error from the server response.\n   */\n  @Input() public isValidationError: CommonFormIsValidationError\n\n  /**\n   * Set this input to override the provided transform error function.\n   */\n  @Input() public transformError: CommonFormTransformError\n\n  /**\n   * A function returning an observable, probably doing a request to the network.\n   * Does nothing by default and can be omitted. This is useful for less typical\n   * use-cases when the request should be sent from the consumer side for finer\n   * control.\n   */\n  @Input() public request: CommonFormRequest\n\n  /**\n   * An alias for \"request\", purposely named the same as the directive so it can\n   * be used in a less verbose fashion..\n   */\n  @Input()\n  public set commonForm (request: (x: any) => rx.Observable<any>) {\n    this.request = request\n  }\n\n  /**\n   * @internal\n   *\n   * Used internally to kep track of form controls within the common form.\n   */\n  @ContentChildren(CommonFormControlDirective, {descendants: true})\n  public controls: QueryList<CommonFormControlDirective>\n\n  constructor (@Self() private container: FormGroupDirective,\n               @Inject(COMMON_FORM_FULL_CONFIG) private config: CommonFormConfig) {\n  }\n\n  public ngOnInit (): void {\n    if (this.propagateErrors == null) {\n      this.propagateErrors = this.config.propagateErrors\n    }\n\n    if (this.transform == null) {\n      this.transform = this.config.transform\n    }\n\n    if (this.isValidationError == null) {\n      this.isValidationError = this.config.isValidationError\n    }\n\n    if (this.transformError == null) {\n      this.transformError = this.config.transformError\n    }\n\n    if (this.request == null) {\n      this.request = this.config.request\n    }\n\n    this.container.ngSubmit.pipe(\n      rxop.tap((event: Event) => {\n        event.preventDefault()\n        if (this.preSubmit != null) {\n          this.preSubmit()\n        }\n      }),\n      rxop.map(() => this.container.control),\n      rxop.filter(form => {\n        if (form.valid) {\n          return true\n        } else {\n          const abstractControls = this.controls.map(ctrl => ctrl.ngControl.control)\n          markControlsAsDirtyAndTouched(abstractControls)\n          const firstInvalidControl = this.controls.find(ctrl => ctrl.ngControl.invalid)\n          if (firstInvalidControl != null) {\n            firstInvalidControl.commonFormControl.focus()\n          }\n          return false\n        }\n      }),\n      rxop.map(form => this.transform(form.value)),\n      rxop.tap(() => this.isLoading.emit(true)),\n      rxop.exhaustMap(value => this.request(value).pipe(\n        rxop.catchError((httpErrorResponse: HttpErrorResponse) => {\n          if (this.isValidationError(httpErrorResponse)) {\n            const flatErrors = this.transformError(httpErrorResponse)\n            const controlsWithErrors = this.setErrors(flatErrors)\n            const firstInvalidControl = this.controls\n              .find(ctrl => controlsWithErrors.indexOf(ctrl.ngControl.control) > -1)\n            if (firstInvalidControl != null) {\n              firstInvalidControl.commonFormControl.focus()\n            }\n          }\n          if (this.propagateErrors) {\n            this.commonFormSubmit.emit(rx.throwError(httpErrorResponse))\n          }\n          return rx.EMPTY\n        }),\n        rxop.finalize(() => this.isLoading.emit(false)),\n        ),\n      ),\n      rxop.finalize(() => this.isLoading.emit(false)),\n      rxop.catchError((err, caught) => {\n        console.error(`Error while handling form submission inside Common Form`, err)\n        return caught\n      }),\n    ).subscribe(response => {\n      this.commonFormSubmit.emit(rx.of(response))\n    })\n\n  }\n\n  private setErrors (errors: FlatServerErrors): AbstractControl[] {\n    const form = this.container.form as FormGroup\n\n    Object.keys(errors).forEach(path => {\n      const control = form.get(path)\n      if (control == null) {\n        console.error(\n          `API claims that a afield with path ${path} is invalid, ` +\n          `but no such field was found on the form.`,\n        )\n      } else {\n        markControlsAsDirtyAndTouchedByPath(form, [path])\n        form.get(path).setErrors({serverError: errors[path]})\n      }\n    })\n\n    return Object.keys(errors).map(path => form.get(path))\n  }\n\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core'\nimport {HttpErrorResponse} from '@angular/common/http'\nimport * as rx from 'rxjs'\nimport {CommonModule} from '@angular/common'\nimport {CommonFormConfig, FlatServerErrors} from './interfaces'\nimport {COMMON_FORM_CONFIG, COMMON_FORM_FULL_CONFIG} from './config'\nimport {CommonFormDirective} from './common-form.directive'\nimport {DefaultCommonFormControlDirective, CommonFormControlDirective} from './common-form-control.directive'\n\n/**\n * A function which takes the form value object and returns\n * a \"transformed\" version. By default, it's an identity.\n */\nexport function transform (formValue: any): any {\n  return formValue\n}\n\n/**\n * Forms are usually submitted to the server, and there's a\n * loading spinner going on somewhere while waiting for the\n * response from the server to arrive. The response could\n * be a success, which is usually the simplest thing that\n * could happen in the app. However, in case of an error,\n * we need to show some validation messages in the fields\n * where the user needs to check his input. This is where\n * the problems begin, and this is what the library solves.\n * This function checks if the error returned from the\n * server is a validation error. I have a habit of marking\n * those with a status 422 (UNPROCESSABLE ENTITY), but in\n * case your code does something else, this is the\n * function you override in order to change how the lib\n * figures out that the response from the server contains\n * a validation error.\n */\nexport function isValidationError (response: HttpErrorResponse): boolean {\n  return response.status == 422\n}\n\n/**\n * The error returned from the server doesn't have to\n * match the \"flat server error\" format which the library\n * expects. See docs for `FlatServerErrors` for more about\n * the format, and override this function to specify your\n * own transformation.\n */\nexport function transformError (serverError: any): FlatServerErrors {\n  return serverError\n}\n\n/**\n * This one might seem a bit weird, but there's actually a\n * default function which transforms the form value into an\n * observable that's responsible for sending the request.\n * The default value is a mocked observable which just emits\n * what's given to it, but this is almost always overridden\n * per form, by giving it a function which performs an HTTP\n * request, returning the observable.\n */\nexport function request<T = any> (formValue: T): rx.Observable<T> {\n  return rx.of(formValue)\n}\n\nexport function commonConfigFactory (partialCommonFormConfig?: Partial<CommonFormConfig>) {\n  return Object.assign({\n    propagateErrors: false,\n    transform,\n    isValidationError,\n    transformError,\n    request,\n  }, (partialCommonFormConfig || {}))\n}\n\nexport const DIRECTIVES = [\n  CommonFormDirective,\n  CommonFormControlDirective,\n  DefaultCommonFormControlDirective,\n]\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  declarations: DIRECTIVES,\n  exports: DIRECTIVES,\n})\nexport class CommonFormsModule {\n  public static forRoot (config?: Partial<CommonFormConfig>): ModuleWithProviders<CommonFormsModule> {\n    return {\n      ngModule: CommonFormsModule,\n      providers: [\n        {\n          provide: COMMON_FORM_CONFIG,\n          useValue: config,\n        },\n        {\n          provide: COMMON_FORM_FULL_CONFIG,\n          useFactory: commonConfigFactory,\n          deps: [COMMON_FORM_CONFIG],\n        },\n      ],\n    }\n  }\n}\n","import {Directive, Input, OnInit} from '@angular/core'\nimport {AbstractControl, ControlContainer} from '@angular/forms'\n\n@Directive({\n  selector: '[sins]',\n})\nexport class SinsDirective implements OnInit {\n\n  @Input('sins') public nameOrControl: string | AbstractControl\n\n  public control: AbstractControl\n\n  constructor (private container: ControlContainer) {\n  }\n\n  public ngOnInit (): void {\n    this.control = typeof this.nameOrControl == 'string'\n      ? this.container.control.get(this.nameOrControl)\n      : this.nameOrControl\n  }\n\n}\n","import {AbstractControl, ControlContainer} from '@angular/forms'\nimport {Directive, DoCheck, EmbeddedViewRef, Inject, Input, isDevMode, OnInit, Optional, TemplateRef, ViewContainerRef} from '@angular/core'\nimport {SinModuleConfig, WhenFunction, WhenObject} from './interfaces'\nimport * as rx from 'rxjs'\nimport {SIN_FULL_CONFIG} from './config'\nimport {SinsDirective} from './sins.directive'\n\nexport interface SinNotification {\n  type: 'add'\n  control: AbstractControl\n  error: any\n}\n\n@Directive({selector: '[sin]'})\nexport class SinDirective implements OnInit, DoCheck, SinModuleConfig {\n\n  public visible$ = new rx.BehaviorSubject<AbstractControl | null>(null)\n\n  private _control: AbstractControl\n  private _controlWithErrors: AbstractControl\n\n  @Input('sin') error: string\n\n  @Input('sinControl')\n  public set control (control: AbstractControl) {\n    this._control = control\n    this.initialize()\n  }\n\n  public get control (): AbstractControl {\n    return this._control\n  }\n\n  // A shorter way to provide a control by only specifying the name\n  @Input('sinName') public name: string\n\n  @Input('sinErrorFromControl')\n  public set controlWithErrors (control: AbstractControl) {\n    this._controlWithErrors = control\n  }\n\n  public get controlWithErrors (): AbstractControl {\n    return this._controlWithErrors || this.control\n  }\n\n  @Input('sinWhen') when: WhenFunction\n\n  private embeddedViewRef: EmbeddedViewRef<any>\n  private initialized = false\n\n  constructor (private templateRef: TemplateRef<any>,\n               private viewContainerRef: ViewContainerRef,\n               @Inject(SIN_FULL_CONFIG) private config: SinModuleConfig,\n               @Optional() private sinsDirective: SinsDirective,\n               @Optional() private controlContainer: ControlContainer) {\n  }\n\n  public ngOnInit (): void {\n    if (this.sinsDirective) {\n      // If we're inside a sins group, use the form control specified there\n      this.control = this.sinsDirective.control\n    } else {\n      if (this.name != null) {\n        // If nameOrControl is given instead of a control\n        if (this.controlContainer == null) {\n          // Name is useless if we're not inside a container such as FormGroup.\n          throw new Error(`You cannot register sinName \"${this.name}\" outside of a control ` +\n            `container. You can use the sinControl input to pass in the control directly.`)\n        } else {\n          // We grab the control with such nameOrControl\n          const control = this.controlContainer.control.get(this.name)\n          if (control == null) {\n            // There's no control with such nameOrControl, probably a typo.\n            throw new Error(`Cannot find control \"${name}\" to bind to sin.`)\n          } else {\n            // We use this control. It's important we trigger the setter here.\n            this.control = control\n          }\n        }\n      }\n    }\n\n    if (isDevMode() && this.control == null) {\n      // Control has not been specified directly (sinControl),\n      // cannot be determined by the given nameOrControl (sinName),\n      // and there is no enclosing sins.\n      throw new Error(`No control specified for sin.`)\n    }\n  }\n\n  public ngDoCheck (): void {\n    if (!this.initialized) {\n      return\n    }\n    this.evaluate()\n  }\n\n  private initialize () {\n    if (this.when == null) {\n      this.when = this.config.when\n    }\n\n    this.initialized = true\n  }\n\n  private evaluate () {\n    const whenControl = this.control\n    const whenObj: WhenObject = {\n      disabled: whenControl.disabled,\n      dirty: whenControl.dirty,\n      enabled: whenControl.enabled,\n      invalid: whenControl.invalid,\n      pending: whenControl.pending,\n      pristine: whenControl.pristine,\n      touched: whenControl.touched,\n      untouched: whenControl.untouched,\n      valid: whenControl.valid,\n    }\n\n    const hasError = this.controlWithErrors.hasError(this.error)\n    const shouldDisplay = this.when(whenObj)\n\n    if (hasError && shouldDisplay) {\n      this.create()\n    } else {\n      this.destroy()\n    }\n  }\n\n  private create () {\n    if (this.embeddedViewRef == null) {\n      this.visible$.next(this.control)\n      const error = this.controlWithErrors.errors[this.error]\n      this.embeddedViewRef = this.viewContainerRef\n        .createEmbeddedView(this.templateRef, {$implicit: error})\n    }\n  }\n\n  private destroy () {\n    if (this.embeddedViewRef != null) {\n      this.visible$.next(null)\n      this.embeddedViewRef.destroy()\n      this.embeddedViewRef = null\n    }\n  }\n\n}\n","import {AfterContentInit, ContentChildren, Directive, ElementRef, OnDestroy, Optional, QueryList, Renderer2, Self} from '@angular/core'\nimport {SinDirective} from './sin.directive'\nimport {AbstractControl, ControlContainer, FormControlName, FormGroup} from '@angular/forms'\nimport * as rx from 'rxjs'\nimport * as rxop from 'rxjs/operators'\n\nexport type Pair<T> = [T, T]\n\nexport function findAdded<T> ([olders, newers]: Pair<T[]>): T[] {\n  return newers.filter(newer => olders.indexOf(newer) == -1)\n}\n\nexport function findRemoved<T> ([olders, newers]: Pair<T[]>): T[] {\n  return findAdded([newers, olders])\n}\n\n@Directive({selector: 'form'})\nexport class FormWithSinsDirective implements AfterContentInit, OnDestroy {\n\n  @ContentChildren(SinDirective, {descendants: true})\n  public sinDirectives: QueryList<SinDirective>\n\n  @ContentChildren(FormControlName, {descendants: true})\n  public formControlNames: QueryList<FormControlName>\n\n  @ContentChildren(FormControlName, {descendants: true, read: ElementRef})\n  public formControlElRefs: QueryList<ElementRef>\n\n  private formControls: rx.Observable<{ name: FormControlName, elRef: ElementRef }>\n\n  private destroy$ = new rx.Subject()\n\n  private classNameForInvalidControl = 'ngx-sin-invalid'\n\n  constructor (@Optional() @Self() private controlContainer: ControlContainer,\n               private renderer: Renderer2,\n               private elementRef: ElementRef) {\n  }\n\n  private markValidityFor (control: AbstractControl, addClass: boolean): void {\n    const index = this.formControlNames.toArray()\n      .findIndex(formControlName => {\n        return control == formControlName.control\n      })\n\n    let elRef: ElementRef\n\n    if (index == -1) {\n      const formGroup = this.controlContainer.control as FormGroup\n      if (formGroup == control) {\n        elRef = this.elementRef\n      } else {\n        // Could not find the FormControl in the view, do nothing\n        return\n      }\n    } else {\n      elRef = this.formControlElRefs.toArray()[index]\n    }\n\n    if (addClass) {\n      this.renderer.addClass(elRef.nativeElement, this.classNameForInvalidControl)\n    } else {\n      this.renderer.removeClass(elRef.nativeElement, this.classNameForInvalidControl)\n    }\n  }\n\n  private markValidityForAll (controls: AbstractControl[], addClass: boolean): void {\n    controls.forEach(control => this.markValidityFor(control, addClass))\n  }\n\n  private markAllAsValid () {\n    this.formControlElRefs.forEach(elRef => {\n      this.renderer.removeClass(elRef.nativeElement, this.classNameForInvalidControl)\n    })\n  }\n\n  public ngAfterContentInit (): void {\n    if (this.sinDirectives == null) {\n      // This form does not have any sins\n      return\n    }\n\n    this.formControls = rx.zip(\n      this.formControlNames.changes.pipe(rxop.startWith(this.formControlNames)),\n      this.formControlElRefs.changes.pipe(rxop.startWith(this.formControlElRefs)),\n    ).pipe(\n      rxop.map(([name, elRef]) => ({name, elRef})),\n    )\n\n    const visibleSins$: rx.Observable<AbstractControl[]> = this.sinDirectives.changes.pipe(\n      rxop.startWith(this.sinDirectives),\n      rxop.map((list: QueryList<SinDirective>) => list.toArray()),\n      rxop.switchMap((sins: SinDirective[]) =>\n        rx.combineLatest(sins.map(sin => sin.visible$))),\n      rxop.map((controls: AbstractControl[]) => controls.filter(control => control != null)),\n    )\n\n    this.formControls.pipe(\n      rxop.withLatestFrom(this.sinDirectives.changes.pipe(rxop.startWith(this.sinDirectives)), (fc, s) => s),\n      rxop.map((list: QueryList<SinDirective>) => list.toArray().map(sin => sin.visible$.getValue())),\n      rxop.map((controls: AbstractControl[]) => controls.filter(control => control != null)),\n      rxop.withLatestFrom(visibleSins$, (_, sins) => sins),\n    )\n      .subscribe((controls: AbstractControl[]) => {\n        // When form controls on the page change, we grab the last info about\n        // visible sins and use that. We have to be destructive here\n        this.markAllAsValid()\n        this.markValidityForAll(controls, true)\n      })\n\n    visibleSins$.pipe(rxop.pairwise())\n      .subscribe(([oldControls, newControls]: Pair<AbstractControl[]>) => {\n        // We can calculate diff instead of removing and setting everything.\n        const added = findAdded([oldControls, newControls])\n        const removed = findRemoved([oldControls, newControls])\n        this.markValidityForAll(added, true)\n        this.markValidityForAll(removed, false)\n      })\n  }\n\n  public ngOnDestroy () {\n    this.destroy$.next()\n  }\n\n}\n","import {SinModuleConfig, WhenObject} from './interfaces'\nimport {ModuleWithProviders, NgModule} from '@angular/core'\nimport {CommonModule} from '@angular/common'\nimport {ReactiveFormsModule} from '@angular/forms'\nimport {SinDirective} from './sin.directive'\nimport {SinsDirective} from './sins.directive'\nimport {FormWithSinsDirective} from './form-with-sins.directive'\nimport {SIN_CONFIG, SIN_FULL_CONFIG} from './config'\n\nexport function when ({dirty, touched}: Partial<WhenObject>): boolean {\n  return dirty && touched\n}\n\nexport const defaultConfig = {\n  when,\n}\n\nexport function factory (config?: Partial<SinModuleConfig>): SinModuleConfig {\n  return Object.assign({}, defaultConfig, config || {})\n}\n\nexport const DIRECTIVES = [\n  SinDirective,\n  SinsDirective,\n  FormWithSinsDirective,\n]\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n  ],\n  declarations: DIRECTIVES,\n  exports: DIRECTIVES,\n})\nexport class SinModule {\n  public static forRoot (config?: Partial<SinModuleConfig>): ModuleWithProviders<SinModule> {\n    return {\n      ngModule: SinModule,\n      providers: [\n        {\n          provide: SIN_CONFIG,\n          useValue: config,\n        },\n        {\n          provide: SIN_FULL_CONFIG,\n          useFactory: factory,\n          deps: [SIN_CONFIG],\n        },\n      ],\n    }\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {CommonFormControlDirective as ɵq,DefaultCommonFormControlDirective as ɵp,providerFactory as ɵo} from './lib/common-form-control.directive';\nexport {DIRECTIVES as ɵf,commonConfigFactory as ɵe,isValidationError as ɵb,request as ɵd,transform as ɵa,transformError as ɵc} from './lib/common-forms.module';\nexport {COMMON_FORM_CONFIG as ɵg,COMMON_FORM_FULL_CONFIG as ɵh,SIN_CONFIG as ɵi,SIN_FULL_CONFIG as ɵj} from './lib/config';\nexport {DIRECTIVES as ɵn,defaultConfig as ɵl,factory as ɵm,when as ɵk} from './lib/sin.module';"],"names":["rx.Subject","rxop.tap","rxop.map","rxop.filter","rxop.exhaustMap","rxop.catchError","rx.throwError","rx.EMPTY","rxop.finalize","rx.of","rx.BehaviorSubject","rx.zip","rxop.startWith","rxop.switchMap","rx.combineLatest","rxop.withLatestFrom","rxop.pairwise","DIRECTIVES"],"mappings":"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"}